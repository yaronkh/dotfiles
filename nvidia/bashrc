# If not running interactively, don't do anything
case $- in
    *i*) ;;
    *) return;;
esac

export TERM=xterm-256color

export PATH=~/dotfiles/build/bin:$PATH

if [[ -z "$TMUX" ]]; then
    tmux new-session
fi

#option to set per-pane variable

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
function fzf {
    if [ "${FUNCNAME[1]}" = "__fzf_select__" ];then
        ~/.fzf/bin/fzf --preview "batcat --color=always --style=numbers --line-range=:500 {}"
    else
        ~/.fzf/bin/fzf
    fi
}

export PATH=~/.bin:$PATH

export XDG_CONFIG_HOME=~/.config

function set_tmux_opt {
    tmux set -q "@$1_$TMUX_PANE" "$2"
}

function get_tmux_opt {
    tmux show -v "@$1_$2"
}

function colorize_less {
    export LESS_TERMCAP_mb=$'\e[1;32m'
    export LESS_TERMCAP_md=$'\e[1;32m'
    export LESS_TERMCAP_me=$'\e[0m'
    export LESS_TERMCAP_se=$'\e[0m'
    export LESS_TERMCAP_so=$'\e[01;33m'
    export LESS_TERMCAP_ue=$'\e[0m'
    export LESS_TERMCAP_us=$'\e[1;4;31m'
}

function colorize_man {
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
    export MANROFFOPT="-c"
}

function cat {
    fp=$(readlink -f "$1")
    if [[ "$fp" == /etc/* ]]; then
        bat -p --paging=never -l bash $@
    else
        bat -p --paging=never $@
    fi
}

function tail {
    if [ "$1" == "-f" ]; then
        tail -f $2 | bat --paging=never -l log
    else
        $@
    fi
}

function bless {
    bat -p $@
}

function hl {
    command $@ --help | bat -plhelp
}

#NOTE we use Virtualenv to run python in a preconfigured box!!
#export PYTHONPATH=$HOME/dev/CloudEndure/Management/src

export HISTCONTROL=erasedups
export HISTSIZE=50000
shopt -s histappend

export PIP_DOWNLOAD_CACHE=$HOME/.pip_download_cache

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=50000
HISTFILESIZE=50000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

#PS1="\[\033]2$PWD\033\033k$(hostname)\]$(tmux set pane-border-status bottom)$PS1"
#PS1='\[\033]2$PWD\033\033$(set_tmux_opt hide_border "" && ~/dotfiles/tmux/hide_border.sh $TMUX_PANE)\]'
PS1='\[\033]2$PWD\033\033\]'
if [ "$color_prompt" = yes ]; then
    PS1="$PS1\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "
else
    PS1='$PS1\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;\u@\h: \w\a\]$PS1"
        ;;
    *)
        ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias onefetch='command onefetch --number-of-authors 100'

alias bastion_command=~/workspace/CloudEndureMG/src/CloudEndureMgDev/scripts/bastion_command.py

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

if [ -e /usr/bin/aws_completer ]; then
    complete -C '/usr/bin/aws_completer' aws
fi

 # if the command-not-found package is installed, use it
 if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
     function command_not_found_handle {
         # check because c-n-f could've been removed in the meantime
         if [ -x /usr/lib/command-not-found ]; then
             /usr/lib/command-not-found -- "$1"
             return $?
         elif [ -x /usr/share/command-not-found/command-not-found ]; then
             /usr/share/command-not-found/command-not-found -- "$1"
             return $?
         else
             printf "%s: command not found\n" "$1" >&2
             return 127
         fi
     }
 fi

#alias ly='~/dev/CloudEndure/scripts/dev/.env-pylint/bin/pylint  --reports=no --output-format=colorized --rcfile ~/dev/CloudEndure/.pylintrc'
#export PYTHONPATH="/home/ANT.AMAZON.COM/kahayaro/dev/CloudEndure/Management/src:/home/ANT.AMAZON.COM/kahayaro/dev/CloudEndure/installer/src:/home/ANT.AMAZON.COM/kahayaro/dev/CloudEndure:$PYTHONPATH"
export OP_SESSION_cloudendure="GDqzU98GynjFvl2jk9Wh8Y_I41LSq_RXRL2uIU-tCdI"

export PATH=$HOME/.toolbox/bin:$PATH

NVIMCMD=$(which nvim)

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
source ~/dotfiles/local/nvim.bash

. "$HOME/.atuin/bin/env"

[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
eval "$(atuin init bash)"

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
eval "$(bat --completion bash)"
colorize_less
colorize_man
export DELTA_FEATURES=+side-by-side

eval $(batpipe)

#shopt -s extdebug
#
#preexec_invoke_exec () {
#    [ -n "$COMP_LINE" ] && return  # do nothing if completing
#    [ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return # don't cause a preexec for $PROMPT_COMMAND
#    local this_command=`HISTTIMEFORMAT= history 1 | sed -e "s/^[ ]*[0-9]*[ ]*//"`;
#    #echo "this_command: $this_command"
#
#    # So that you don't get locked accidentally
#    if [ "shopt -u extdebug" == "$this_command" ]; then
#        return 0
#    fi
#
#    # Modify $this_command and then execute it
#    if [[ "$this_command" == *--help ]]; then
#            $this_command | bat -plhelp
#            return 1
#    fi
#
#    return 0
#}
#trap 'preexec_invoke_exec' DEBUG
. "$HOME/.cargo/env"
