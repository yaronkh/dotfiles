# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"
#export TERM=xterm-256color
export TERM=screen-256color

export PATH=~/dotfiles/build/bin:$PATH
if [[ -z "$TMUX" ]]; then
    tmux new-session
fi

export XDG_CONFIG_HOME=~/.config
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"
#ZSH_THEME="nicoulaj"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder


#init pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
export ZSH_PYENV_VIRTUALENV=true
#
#f-zsh-plugin
#export FZF_PREVIEW_ADVANCED=true
export FZF_PREVIEW_WINDOW=right:65%:nohidden
FZF_COLOR_SCHEME=--color='hl:148,hl+:154,pointer:032,marker:010,bg+:237,gutter:008'

#Jira configuration
export JIRA_URL=https://jirasw.nvidia.com/
export JIRA_NAME=ykahanovitch
export JIRA_RAPID_BOARD=true

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=( $($HOME/dotfiles/etczsh/install_zsh_plugins.sh print ) )

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
$ZSH_CUSTOM/aliases.zsh
$ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias zshconfig="nvim ~/.zshrc"
alias ohmyzsh="nvim ~/.oh-my-zsh"

#[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
source $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

#init atuin
PATH="$HOME/.atuin/bin:$PATH"
eval "$(atuin init zsh)"

#zbel ignores
zbell_ignore=($EDITOR $PAGER bat batcat)
zbell_duration=15
zbell_use_notify_send=false

#init zoxide
eval "$(zoxide init zsh)"

#colorize man pages
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANROFFOPT="-c"

#clolorzie less
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

#colorized cat
unalias cat
function cat {
    fp=$(readlink -f "$1")
    if [[ "$fp" == /etc/* ]]; then
        bat -p --paging=never -l bash $@
    else
        bat -p --paging=never $@
    fi
}


# colorize given command --help output with bat utility
function hl {
    command $@ --help | bat -plhelp
}

#add sign to prompt
#PROMPT="${PROMPT}%{$fg_bold[green]%}%1{➜%} "
PROMPT="${PROMPT}%(?:%{$fg_bold[green]%}%1{➜%} :%{$fg_bold[red]%}%1{➜%} )%{$reset_color%}"


#provide function that wraps nvim
source "$HOME/dotfiles/local/nvim.bash"

#uncomment to have powerlevel10k
#source ~/powerlevel10k/powerlevel10k.zsh-theme
#
## To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# This should fix the error at the start of zsh session, but doesn't work :(

#set up vim keys
bindkey -v

#use extended globing
setopt extendedglob

TRAPWINCH() {
  zle && { zle reset-prompt; zle -R }
}
TRAPEXIT() {
  zle && { zle reset-prompt; zle -R }
}

# Function to search and replace in all git tracked files
function gsed() {
        git ls-files | xargs sed -i "s/$1/$2/g"
}

source $HOME/dotfiles/nvm/nvm.sh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
if which "gh" >/dev/null 2>&1; then
        eval "$(gh copilot alias -- zsh)"
fi

#make()
#{
#  /usr/bin/make "$@" 2>&1 | sed -E -e "s/error/ $(echo -e "\\033[31m" ERROR "\\033[0m"/g)"   -e "s/warning/ $(echo -e "\\033[0;33m" WARNING "\\033[0m"/g)"
#  return ${PIPESTATUS[0]}
#}
#
function delete_untracked_files_with_extension() {
        local extension=""
        if [ -z "$1" ]; then
                echo "Usage: delete_untracked_files_with_extension <extension>"
                return 1
        fi

        if [ "$1" != '-y' ] ;then
                dry_run="yes"
                extension="$1"
        else
                dry_run=""
                extension="$2"
        fi

        if [ -n "$dry_run" ] ; then
                echo "Dry run mode: No files will be deleted."
        fi

        # Find all untracked files with the given extension
        local untracked_files=$(git ls-files --others --exclude-standard)

        # Filter files based on the given extension and delete them
        for file in ${(f)untracked_files}; do
                if [[ "$file" == *.$extension ]]; then
                        echo "Deleting $file"
                        if [ -z "$dry_run" ] ; then
                                rm "$file"
                        fi
                fi
        done
}

function git_func_hist() {
        func=$1
        file=$2
        git log -L :$2:$3 "$@"
}

function deploy_editor_config() {
        ~/dotfiles/proj_deploy/create_editor_config.bash $@ | grcat ~/dotfiles/grc/conf.simple
}

function _deploy_editor_config() {
        if ((CURRENT == 2)); then
                _files -/ -W ~/dotfiles/proj_deploy/projects/
                return
        fi
}

compdef _deploy_editor_config deploy_editor_config
