# Configuration for Alacritty, the GPU enhanced terminal emulator


# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Source Code Pro
    # Style can be specified to pick a specific face.
    style: Medium

  # The bold font face
  bold:
    family: Source Code Pro
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: Source Code Pro
    # Style can be specified to pick a specific face.
    style: Medium Italic

  # Point size of the font
  size: 11.0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.

# Small font configuration (changes require restart)
small_font:
  upper_bound: 7.0
  font:
      normal:
        family: Terminus
      bold:
        family: Terminus
      italic:
        family: Terminus
      size: 12.0

# Should display the render timer
debug.render_timer: false

# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary:
    background: '0x000000'
    foreground: '0xeaeaea'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x000000'
    cursor: '0x00ff00'

  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xd54e53'
    green:   '0xb9ca4a'
    yellow:  '0xe6c547'
    blue:    '0x7aa6da'
    magenta: '0xc397d8'
    cyan:    '0x70c0ba'
    white:   '0xc7c7c7'

  # Bright colors
  bright:
    black:   '0x686868'
    red:     '0xff3334'
    green:   '0x9ec400'
    yellow:  '0xe7c547'
    blue:    '0x7aa6da'
    magenta: '0xb77ee0'
    cyan:    '0x54ced6'
    white:   '0xffffff'

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
#
# Want to add a binding (e.g. "PageUp") but are unsure what the X sequence
# (e.g. "\x1b[5~") is? Open another terminal (like xterm) without tmux,
# then run `showkey -a` to get the sequence associated to a key combination.
key_bindings:
# - { key: V,        mods: Control|Shift,    action: Paste               }
  - { key: C,        mods: Control|Shift,    action: Copy                }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: Key0,     mods: Control | Shift, action: ResetFontSize        }
  - { key: Up,       mods: Control | Shift, action: IncreaseFontSize     }
  - { key: Down,     mods: Control | Shift, action: DecreaseFontSize     }
  - { key: Return,   mods: Shift,           chars: "\x1b[5;30001~"       }
  - { key: Return,   mods: Alt,             chars: "\x1b[5;30002~"       }
  - { key: Return,   mods: Control,         chars: "\x1b[5;30003~"       }
  - { key: Return,   mods: Control | Alt,   chars: "\x1b[5;30005~"       }
  - { key: PageUp,   mods: Shift,   action: ScrollPageUp   }
  - { key: PageDown, mods: Shift,   action: ScrollPageDown }
  - { key: End,      mods: Shift,   action: ScrollToBottom }
  - { key: Home,     mods: Shift,   action: ScrollToTop    }
  - { key: Up,       mods: Control | Alt,   chars: "\x1b[5;30009~"       }
  - { key: Down,     mods: Control | Alt,   chars: "\x1b[5;30010~"       }
  - { key: Left,     mods: Control | Alt,   chars: "\x1b[5;30012~"       }
  - { key: Right,    mods: Control | Alt,   chars: "\x1b[5;30013~"       }
  - { key: Space,    mods: Control,         chars: "\x1b[5;30014~"       }
  - { key: M,        mods: Control | Shift, chars: "\x1b[5;30015~"       }
  - { key: J,        mods: Control | Shift, chars: "\x1b[5;30016~"       }
  - { key: U,        mods: Control | Shift, chars: "\x1b[5;30017~"       }
  - { key: T,        mods: Control | Shift, chars: "\x1b[5;30018~"       }
  - { key: Y,        mods: Control | Shift, chars: "\x1b[5;30019~"       }
  - { key: Minus,  mods: Control | Alt,   chars: "\x1b[5;30020~"       }
  - { key: Backslash, mods: Control | Alt,   chars: "\x1b[5;30021~"       }
  - { key: Delete,   mods: Control,         chars: "\x1b[3;5~"           }
  - { key: Insert,   mods: Shift,   action: PasteSelection               }
  - { key: Key1,     mods: Control, chars: "\x1b[27;5;49~"               }
  - { key: Key2,     mods: Control, chars: "\x1b[27;5;50~"               }
  - { key: Key3,     mods: Control, chars: "\x1b[27;5;51~"               }
  - { key: Key4,     mods: Control, chars: "\x1b[27;5;52~"               }
  - { key: Key5,     mods: Control, chars: "\x1b[27;5;53~"               }
  - { key: Key6,     mods: Control, chars: "\x1b[27;5;54~"               }
  - { key: Key7,     mods: Control, chars: "\x1b[27;5;55~"               }
  - { key: Key8,     mods: Control, chars: "\x1b[27;5;56~"               }
  - { key: Key9,     mods: Control, chars: "\x1b[27;5;57~"               }
  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[1~",  mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[4~",  mode: ~AppCursor  }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: Home,     mods: Control, chars: "\x1b[1;5H"                   }
  - { key: End,      mods: Control, chars: "\x1b[1;5F"                   }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[2;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
    #- { key: Right,    mods: Alt,     chars: "\x1b[2;3C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[2"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[2;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[2;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }
  - { key: F1,       mods: Control, chars: "\x1b[1;5P"                   }
  - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                   }
  - { key: F3,       mods: Control, chars: "\x1b[1;5R"                   }
  - { key: F4,       mods: Control, chars: "\x1b[1;5S"                   }
  - { key: F5,       mods: Control, chars: "\x1b[15;5~"                  }
  - { key: F6,       mods: Control, chars: "\x1b[17;5~"                  }
  - { key: F7,       mods: Control, chars: "\x1b[18;5~"                  }
  - { key: F8,       mods: Control, chars: "\x1b[19;5~"                  }
  - { key: F9,       mods: Control, chars: "\x1b[20;5~"                  }
  - { key: F10,      mods: Control, chars: "\x1b[21;5~"                  }
  - { key: F11,      mods: Control, chars: "\x1b[23;5~"                  }
  - { key: F12,      mods: Control, chars: "\x1b[24;5~"                  }
  - { key: F1,       mods: Control|Shift, chars: "\x1b[1;2P"             }
  - { key: F2,       mods: Control|Shift, chars: "\x1b[1;2Q"             }
  - { key: F3,       mods: Control|Shift, chars: "\x1b[1;2R"             }
  - { key: F4,       mods: Control|Shift, chars: "\x1b[1;2S"             }
  - { key: F5,       mods: Control|Shift, chars: "\x1b[15;2~"            }
  - { key: F6,       mods: Control|Shift, chars: "\x1b[17;2~"            }
  - { key: F7,       mods: Control|Shift, chars: "\x1b[18;2~"            }
  - { key: F8,       mods: Control|Shift, chars: "\x1b[19;2~"            }
  - { key: F9,       mods: Control|Shift, chars: "\x1b[20;2~"            }
  - { key: F10,      mods: Control|Shift, chars: "\x1b[21;2~"            }
  - { key: F11,      mods: Control|Shift, chars: "\x1b[23;2~"            }
  - { key: F12,      mods: Control|Shift, chars: "\x1b[24;2~"            }
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }


ouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
shell:
  program: /bin/bash
#  args:
#    - --login


scrolling:
  # How many lines of scrollback to keep,
  # '0' will disable scrolling.
  history: 100000

  # Number of lines the viewport will move for every line
  # scrolled when scrollback is enabled (history > 0).
  multiplier: 3

  # Faux Scrolling
  #
  # The `faux_multiplier` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_multiplier` to 0.
  #faux_multiplier: 3

  # Automatically scroll to the bottom when new text is written
  # to the terminal.
  auto_scroll: false
